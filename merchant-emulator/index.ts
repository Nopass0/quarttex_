import axios from 'axios';

interface Config {
  apiUrl: string;
  merchantToken: string;
  minAmount: number;
  maxAmount: number;
  delayBetweenRequests: number; // –º—Å
  totalRequests?: number; // –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
}

interface TransactionResponse {
  id: string;
  numericId: number;
  amount: number;
  status: string;
  error?: string;
}

class MerchantEmulator {
  private config: Config;
  private requestCount = 0;
  private successCount = 0;
  private failedCount = 0;
  private errors: Map<string, number> = new Map();

  constructor(config: Config) {
    this.config = config;
  }

  private getRandomAmount(): number {
    const { minAmount, maxAmount } = this.config;
    return Math.floor(Math.random() * (maxAmount - minAmount + 1)) + minAmount;
  }

  private getRandomString(length: number): string {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  private methodId: string | null = null;

  private async getMethodId(): Promise<string> {
    if (this.methodId) return this.methodId;

    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–≤...');
      const response = await axios.get(`${this.config.apiUrl}/api/merchant/methods`, {
        headers: {
          'x-merchant-api-key': this.config.merchantToken
        }
      });

      const methods = response.data;
      const c2cMethod = methods.find((m: any) => m.type === 'c2c' || m.code === 'c2c');
      
      if (!c2cMethod) {
        throw new Error('–ú–µ—Ç–æ–¥ c2c –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      this.methodId = c2cMethod.id;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ c2c: ${c2cMethod.name} (ID: ${this.methodId})`);
      return this.methodId;
    } catch (error: any) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–æ–¥—ã:', error.response?.data || error.message);
      throw error;
    }
  }

  private async createTransaction(): Promise<void> {
    const methodId = await this.getMethodId();
    const orderId = `TEST_${Date.now()}_${this.getRandomString(8)}`;
    const amount = this.getRandomAmount();
    const userId = `user_${this.getRandomString(10)}`;

    const requestData = {
      methodId,
      amount,
      orderId,
      userId,
      callbackUri: 'https://example.com/callback',
      successUri: 'https://example.com/success',
      failUri: 'https://example.com/fail',
      type: 'IN',
      isMock: false
    };

    try {
      console.log(`[${new Date().toLocaleTimeString()}] –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${orderId}, —Å—É–º–º–∞: ${amount} ‚ÇΩ`);
      
      const response = await axios.post<TransactionResponse>(
        `${this.config.apiUrl}/api/merchant/createTransaction`,
        requestData,
        {
          headers: {
            'x-merchant-api-key': this.config.merchantToken,
            'Content-Type': 'application/json'
          }
        }
      );

      this.successCount++;
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${response.data.numericId} (${response.data.id})`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${response.data.status}, –°—É–º–º–∞: ${response.data.amount} ‚ÇΩ`);
    } catch (error: any) {
      this.failedCount++;
      const errorMessage = error.response?.data?.error || error.message;
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—à–∏–±–∫–∞–º
      const currentCount = this.errors.get(errorMessage) || 0;
      this.errors.set(errorMessage, currentCount + 1);

      console.error(`‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
      
      if (error.response?.status === 409 && errorMessage.includes('NO_REQUISITE')) {
        console.log('   üí° –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
      }
    }

    this.requestCount++;
  }

  private printStatistics(): void {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.requestCount}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${this.successCount} (${((this.successCount / this.requestCount) * 100).toFixed(1)}%)`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${this.failedCount} (${((this.failedCount / this.requestCount) * 100).toFixed(1)}%)`);
    
    if (this.errors.size > 0) {
      console.log('\n   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫:');
      for (const [error, count] of this.errors.entries()) {
        console.log(`   - ${error}: ${count} —Ä–∞–∑`);
      }
    }
  }

  async start(): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ –º–µ—Ä—á–∞–Ω—Ç–∞');
    console.log(`üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
    console.log(`   API URL: ${this.config.apiUrl}`);
    console.log(`   –î–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º: ${this.config.minAmount} - ${this.config.maxAmount} ‚ÇΩ`);
    console.log(`   –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: ${this.config.delayBetweenRequests} –º—Å`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.config.totalRequests || '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ'}`);
    console.log('');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è graceful shutdown
    process.on('SIGINT', () => {
      console.log('\n\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞...');
      this.printStatistics();
      process.exit(0);
    });

    while (true) {
      await this.createTransaction();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
      if (this.config.totalRequests && this.requestCount >= this.config.totalRequests) {
        console.log('\n‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤');
        break;
      }

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      await new Promise(resolve => setTimeout(resolve, this.config.delayBetweenRequests));
    }

    this.printStatistics();
  }
}

// –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const config: Config = {
  apiUrl: process.env.API_URL || 'http://localhost:3001',
  merchantToken: process.env.MERCHANT_TOKEN || '',
  minAmount: parseInt(process.env.MIN_AMOUNT || '1000'),
  maxAmount: parseInt(process.env.MAX_AMOUNT || '50000'),
  delayBetweenRequests: parseInt(process.env.DELAY || '1000'),
  totalRequests: process.env.TOTAL_REQUESTS ? parseInt(process.env.TOTAL_REQUESTS) : undefined
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if (!config.merchantToken) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –º–µ—Ä—á–∞–Ω—Ç–∞!');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  MERCHANT_TOKEN=your_token bun run index.ts');
  console.log('');
  console.log('–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:');
  console.log('  API_URL=http://localhost:3001  # URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:3001)');
  console.log('  MIN_AMOUNT=1000                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)');
  console.log('  MAX_AMOUNT=50000               # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50000)');
  console.log('  DELAY=1000                     # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)');
  console.log('  TOTAL_REQUESTS=100             # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)');
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞
const emulator = new MerchantEmulator(config);
emulator.start().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});