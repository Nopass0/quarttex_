import { db as prisma } from './backend/src/db';
import { CallbackService } from './backend/src/services/CallbackService';

async function testCallbackHistory() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–ª–±—ç–∫–æ–≤...');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç –∏ –º–µ—Ç–æ–¥
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞ –∏ –º–µ—Ç–æ–¥–∞...');
    const merchant = await prisma.merchant.create({
      data: {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ä—á–∞–Ω—Ç',
        email: 'test@example.com',
        token: 'test-token-123'
      }
    });

    const method = await prisma.method.create({
      data: {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥',
        code: 'TEST_METHOD',
        type: 'CARD',
        currency: 'RUB'
      }
    });

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    console.log('2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const transaction = await prisma.transaction.create({
      data: {
        amount: 1000,
        assetOrBank: 'SBERBANK',
        orderId: 'test-order-123',
        currency: 'RUB',
        userId: 'test-user-123',
        userIp: '127.0.0.1',
        callbackUri: 'https://httpbin.org/post',
        successUri: 'https://httpbin.org/post',
        failUri: 'https://httpbin.org/post',
        expired_at: new Date(Date.now() + 30 * 60 * 1000), // +30 –º–∏–Ω—É—Ç
        commission: 5,
        clientName: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
        status: 'CREATED',
        merchantId: merchant.id,
        methodId: method.id
      }
    });

    console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${transaction.id}`);

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫
    console.log('3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–ª–±—ç–∫–∞...');
    await CallbackService.sendCallback(transaction, 'READY');
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–±—ç–∫–æ–≤ –≤ –ë–î
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–ª–±—ç–∫–æ–≤...');
    const callbackHistory = await prisma.callbackHistory.findMany({
      where: { transactionId: transaction.id },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${callbackHistory.length}`);
    
    if (callbackHistory.length > 0) {
      const callback = callbackHistory[0];
      console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–ª–±—ç–∫:');
      console.log(`  - URL: ${callback.url}`);
      console.log(`  - Payload: ${JSON.stringify(callback.payload)}`);
      console.log(`  - Status Code: ${callback.statusCode}`);
      console.log(`  - Response: ${callback.response?.substring(0, 100)}...`);
      console.log(`  - Error: ${callback.error || '–ù–µ—Ç'}`);
      console.log(`  - –í—Ä–µ–º—è: ${callback.createdAt}`);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç
    console.log('5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...');
    const response = await fetch(`http://localhost:3000/admin/transactions/${transaction.id}/callbacks`, {
      headers: {
        'X-Admin-Key': '3d3b2e3efa297cae2bc6b19f3f8448ed2b2c7fd43af823a2a3a0585edfbb67d1'
      }
    });

    if (response.ok) {
      const apiData = await response.json();
      console.log(`‚úÖ API –≤–µ—Ä–Ω—É–ª ${apiData.callbackHistory.length} –∑–∞–ø–∏—Å–µ–π`);
    } else {
      console.log(`‚ùå API –æ—à–∏–±–∫–∞: ${response.status}`);
    }

    // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–∏–Ω –∫–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–ª–±—ç–∫–∞...');
    await CallbackService.sendCallback(transaction, 'EXPIRED');
    
    const finalHistory = await prisma.callbackHistory.findMany({
      where: { transactionId: transaction.id },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`üìã –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${finalHistory.length}`);

    // –û—á–∏—Å—Ç–∫–∞
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.callbackHistory.deleteMany({
      where: { transactionId: transaction.id }
    });
    await prisma.transaction.delete({
      where: { id: transaction.id }
    });
    await prisma.method.delete({
      where: { id: method.id }
    });
    await prisma.merchant.delete({
      where: { id: merchant.id }
    });

    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testCallbackHistory();