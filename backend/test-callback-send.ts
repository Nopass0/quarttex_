#!/usr/bin/env bun

import { db } from './src/db'

async function testCallbackSend() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ª–±—ç–∫–∞...\n')
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å callback URL
    const transaction = await db.transaction.findFirst({
      where: {
        callbackUri: {
          not: null,
          not: 'none',
          not: ''
        }
      },
      include: {
        merchant: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    })

    if (!transaction) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å callback URL')
      return
    }

    console.log('üìã –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:')
    console.log(`   ID: ${transaction.id}`)
    console.log(`   –°—É–º–º–∞: ${transaction.amount} RUB`)
    console.log(`   –°—Ç–∞—Ç—É—Å: ${transaction.status}`)
    console.log(`   Callback URL: ${transaction.callbackUri}`)
    console.log(`   Merchant: ${transaction.merchant?.name || 'N/A'}\n`)

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...')
    
    const proxyResponse = await fetch('http://localhost:3000/api/callback-proxy/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: transaction.callbackUri,
        data: {
          id: transaction.id,
          amount: transaction.amount,
          status: transaction.status
        },
        headers: {
          'X-Merchant-Token': transaction.merchant?.token || undefined
        },
        transactionId: transaction.id
      })
    })

    const proxyResult = await proxyResponse.json()
    
    if (proxyResponse.ok) {
      console.log('‚úÖ –ö–æ–ª–±—ç–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏')
      console.log('   –û—Ç–≤–µ—Ç:', JSON.stringify(proxyResult, null, 2))
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–ª–±—ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏')
      console.log('   –°—Ç–∞—Ç—É—Å:', proxyResponse.status)
      console.log('   –û—à–∏–±–∫–∞:', JSON.stringify(proxyResult, null, 2))
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–±—ç–∫–æ–≤
    const history = await db.callbackHistory.findFirst({
      where: {
        transactionId: transaction.id
      },
      orderBy: {
        createdAt: 'desc'
      }
    })

    if (history) {
      console.log('\nüìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–ª–±—ç–∫–∞:')
      console.log(`   ID: ${history.id}`)
      console.log(`   URL: ${history.url}`)
      console.log(`   Payload: ${JSON.stringify(history.payload, null, 2)}`)
      console.log(`   Status Code: ${history.statusCode || 'N/A'}`)
      console.log(`   Response: ${history.response || 'N/A'}`)
      console.log(`   Error: ${history.error || 'None'}`)
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await db.$disconnect()
  }
}

testCallbackSend()