import { db } from "./src/db"

async function main() {
  try {
    console.log("üîç –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏...")
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const updated = await db.notification.updateMany({
      where: {
        message: {
          contains: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 1234"
        }
      },
      data: {
        isProcessed: false,
        metadata: {
          category: "transaction",
          priority: 1,
          timestamp: Date.now(),
          packageName: "ru.vtb24.mobilebanking.android"
        }
      }
    })
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${updated.count}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞
    const logs = await db.serviceLog.findMany({
      where: {
        service: {
          name: "NotificationMatcherService"
        },
        OR: [
          {
            message: {
              contains: "1234"
            }
          },
          {
            data: {
              path: ["notification", "message"],
              string_contains: "1234"
            }
          },
          {
            message: {
              contains: "PARSE_FAILED"
            }
          }
        ]
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 20
    })
    
    console.log(`\nüìù –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º 1234 –∏–ª–∏ PARSE_FAILED: ${logs.length}`)
    
    logs.forEach(log => {
      const time = log.createdAt.toLocaleTimeString()
      console.log(`\n[${time}] ${log.level}: ${log.message}`)
      if (log.data) {
        console.log(`   –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(log.data, null, 2))
      }
    })
    
    // –¢–µ–ø–µ—Ä—å –∂–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ—Å—å –ª–∏
    console.log("\n‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = await db.notification.findFirst({
      where: {
        message: {
          contains: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 1234"
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
    
    console.log("\nüì± –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è:")
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${notification?.isProcessed}`)
    console.log(`   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${notification?.transactionId || '–ù–ï–¢'}`)
    if (notification?.metadata) {
      console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(notification.metadata, null, 2)}`)
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error)
  }
}

main()