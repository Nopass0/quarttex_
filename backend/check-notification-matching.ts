import { db } from "./src/db"

async function main() {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π...")
    
    // –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 1234"
    const notification = await db.notification.findFirst({
      where: {
        message: {
          contains: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 1234"
        }
      },
      include: {
        Device: {
          include: {
            bankDetails: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
    
    if (!notification) {
      console.log("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 1234' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
      return
    }
    
    console.log("\nüì± –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
    console.log(`   ID: ${notification.id}`)
    console.log(`   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${notification.Device?.name} (${notification.deviceId})`)
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${notification.message}`)
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${notification.isProcessed}`)
    console.log(`   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${notification.transactionId || '–ù–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–û'}`)
    console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${notification.createdAt}`)
    
    // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –Ω–æ –Ω–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, —Å–±—Ä–æ—Å–∏–º —Ñ–ª–∞–≥
    if (notification.isProcessed && !notification.transactionId) {
      console.log("\nüîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ isProcessed –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
      await db.notification.update({
        where: { id: notification.id },
        data: { isProcessed: false }
      })
      console.log("‚úÖ –§–ª–∞–≥ —Å–±—Ä–æ—à–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å NotificationMatcherService
    const service = await db.service.findUnique({
      where: { name: "NotificationMatcherService" }
    })
    
    console.log("\n‚öôÔ∏è  –°—Ç–∞—Ç—É—Å NotificationMatcherService:")
    console.log(`   –í–∫–ª—é—á–µ–Ω: ${service?.enabled}`)
    console.log(`   –°—Ç–∞—Ç—É—Å: ${service?.status}`)
    console.log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${service?.interval}ms`)
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: ${service?.lastTick}`)
    
    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å—É–º–º–æ–π 1234
    const transactions = await db.transaction.findMany({
      where: {
        amount: 1234,
        type: 'IN',
        status: 'IN_PROGRESS',
        requisites: {
          deviceId: notification.deviceId
        }
      },
      include: {
        requisites: true
      }
    })
    
    console.log(`\nüí∞ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Å—É–º–º–æ–π 1234 –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: ${transactions.length}`)
    
    if (transactions.length > 0) {
      transactions.forEach(tx => {
        console.log(`\n   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.id}:`)
        console.log(`   - –°—É–º–º–∞: ${tx.amount}`)
        console.log(`   - –°—Ç–∞—Ç—É—Å: ${tx.status}`)
        console.log(`   - –†–µ–∫–≤–∏–∑–∏—Ç: ${tx.requisites?.cardNumber || 'N/A'}`)
        console.log(`   - –°–æ–∑–¥–∞–Ω–∞: ${tx.createdAt}`)
      })
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π:`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–∫–∏
    const regexes = [
      /–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\s+([\d\s]+[.,]?\d{0,2})\s*(?:—Ä|‚ÇΩ|—Ä—É–±|RUB)/i,
      /–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\s+(\d+)/i,
      /–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\s+([\d\s]+)/,
    ]
    
    regexes.forEach((regex, idx) => {
      const match = regex.exec(notification.message || '')
      if (match) {
        const amount = parseFloat(match[1].replace(/\s/g, '').replace(',', '.'))
        console.log(`   ‚úÖ Regex ${idx + 1}: –Ω–∞—à–ª–∞ —Å—É–º–º—É ${amount}`)
      } else {
        console.log(`   ‚ùå Regex ${idx + 1}: –Ω–µ –Ω–∞—à–ª–∞ —Å—É–º–º—É`)
      }
    })
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    console.log(`\nüìù –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:`)
    console.log(`   "${notification.message}"`)
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error)
  }
}

main()