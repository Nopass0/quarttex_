import { db } from "./src/db"
import { NotificationType } from "@prisma/client"

async function main() {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è NotificationMatcherService...")
    
    // –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 1234"
    const notification = await db.notification.findFirst({
      where: {
        message: {
          contains: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 1234"
        }
      },
      include: {
        Device: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
    
    if (!notification) {
      console.log("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
      return
    }
    
    console.log("\nüì± –î–µ—Ç–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    console.log(`   ID: ${notification.id}`)
    console.log(`   –¢–∏–ø: ${notification.type}`)
    console.log(`   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${notification.deviceId}`)
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${notification.message}`)
    console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(notification.metadata, null, 2)}`)
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${notification.isProcessed}`)
    console.log(`   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${notification.transactionId || '–ù–ï–¢'}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞ NotificationMatcherService
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–ø—Ä–æ—Å–∞ NotificationMatcherService:")
    
    // –£—Å–ª–æ–≤–∏–µ 1: type = AppNotification
    const isAppNotification = notification.type === NotificationType.AppNotification
    console.log(`   type = AppNotification: ${isAppNotification} (—Ç–µ–∫—É—â–∏–π —Ç–∏–ø: ${notification.type})`)
    
    // –£—Å–ª–æ–≤–∏–µ 2: type = SMS –∏ –∏–º–µ–µ—Ç bankType
    const isSmsWithBankType = notification.type === NotificationType.SMS && 
      notification.metadata && 
      typeof notification.metadata === 'object' && 
      'bankType' in notification.metadata
    console.log(`   type = SMS —Å bankType: ${isSmsWithBankType}`)
    
    // –£—Å–ª–æ–≤–∏–µ 3: isProcessed = false
    console.log(`   isProcessed = false: ${!notification.isProcessed}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–º
    const willBeFound = (isAppNotification || isSmsWithBankType) && !notification.isProcessed
    console.log(`\n‚úÖ –ë—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–º: ${willBeFound}`)
    
    if (!willBeFound) {
      console.log("\n‚ùå –ü—Ä–∏—á–∏–Ω—ã, –ø–æ—á–µ–º—É –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ:")
      if (!isAppNotification && !isSmsWithBankType) {
        console.log("   - –¢–∏–ø –Ω–µ AppNotification –∏ –Ω–µ SMS —Å bankType")
      }
      if (notification.isProcessed) {
        console.log("   - –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (isProcessed = true)")
      }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏
    const serviceQuery = await db.notification.findMany({
      where: {
        AND: [
          {
            OR: [
              {
                type: NotificationType.AppNotification
              },
              {
                AND: [
                  { type: NotificationType.SMS },
                  { 
                    metadata: {
                      path: ["bankType"],
                      not: null
                    }
                  }
                ]
              }
            ]
          },
          {
            isProcessed: false
          }
        ]
      },
      take: 10
    })
    
    console.log(`\nüìä –í—Å–µ–≥–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞: ${serviceQuery.length}`)
    
    // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –æ–±–Ω–æ–≤–∏–º –µ–≥–æ
    if (!isAppNotification && !isSmsWithBankType) {
      console.log("\nüîß –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ AppNotification...")
      await db.notification.update({
        where: { id: notification.id },
        data: { 
          type: NotificationType.AppNotification,
          isProcessed: false
        }
      })
      console.log("‚úÖ –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error)
  }
}

main()