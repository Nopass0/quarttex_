import { PrismaClient } from "@prisma/client";

const db = new PrismaClient();

async function checkTraderDevice() {
  try {
    // –ù–∞–π–¥–µ–º —Ç—Ä–µ–π–¥–µ—Ä–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transaction = await db.transaction.findFirst({
      where: {
        status: 'IN_PROGRESS',
        type: 'IN',
        amount: 3201
      },
      include: {
        trader: true
      }
    });

    if (!transaction) {
      console.log("Transaction not found");
      return;
    }

    console.log(`Transaction found:`);
    console.log(`- ID: ${transaction.id}`);
    console.log(`- Amount: ${transaction.amount}`);
    console.log(`- Trader ID: ${transaction.traderId}`);
    console.log(`- Username: ${transaction.trader.username}`);

    // –ù–∞–π–¥–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞  
    const devices = await db.device.findMany({
      where: {
        userId: transaction.traderId,  // traderId —ç—Ç–æ ID user'–∞
        isWorking: true
      }
    });

    console.log(`\nDevices found: ${devices.length}`);
    
    if (devices.length > 0) {
      const device = devices[0];
      console.log(`\nUsing device:`);
      console.log(`- ID: ${device.id}`);
      console.log(`- Name: ${device.name}`);
      console.log(`- Model: ${device.model}`);
      
      // –°–æ–∑–¥–∞–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notification = await db.notification.create({
        data: {
          deviceId: device.id,
          packageName: "ru.vtb24.mobilebanking.android",
          application: "–í–¢–ë –û–Ω–ª–∞–π–Ω",
          title: "–í–¢–ë –û–Ω–ª–∞–π–Ω",
          message: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 3201—Ä –°—á–µ—Ç*1234 SBP –ë–∞–ª–∞–Ω—Å 50000—Ä 12:34",
          isRead: false,
          isProcessed: false,
          type: "AppNotification",
          metadata: {
            originalAmount: "3201",
            parsedAmount: 3201,
            bankType: "VTB"
          }
        }
      });

      console.log("\n‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:");
      console.log(`- ID: ${notification.id}`);
      console.log(`- Message: ${notification.message}`);
      console.log(`- isProcessed: ${notification.isProcessed}`);
      
    } else {
      console.log("\n‚ö†Ô∏è No active devices found for trader");
      
      // –°–æ–∑–¥–∞–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      const newDevice = await db.device.create({
        data: {
          userId: transaction.traderId,
          name: "Test Device",
          model: "Test Model",
          deviceId: `test-device-${Date.now()}`,
          isWorking: true,
          emulated: false,
          pushEnabled: true,
          token: `test-token-${Date.now()}`
        }
      });
      
      console.log("\n‚úÖ Created new device:");
      console.log(`- ID: ${newDevice.id}`);
      console.log(`- Name: ${newDevice.name}`);
      
      // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notification = await db.notification.create({
        data: {
          deviceId: newDevice.id,
          packageName: "ru.vtb24.mobilebanking.android",
          application: "–í–¢–ë –û–Ω–ª–∞–π–Ω",
          title: "–í–¢–ë –û–Ω–ª–∞–π–Ω",
          message: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 3201—Ä –°—á–µ—Ç*1234 SBP –ë–∞–ª–∞–Ω—Å 50000—Ä 12:34",
          isRead: false,
          isProcessed: false,
          type: "AppNotification",
          metadata: {
            originalAmount: "3201",
            parsedAmount: 3201,
            bankType: "VTB"
          }
        }
      });

      console.log("\n‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:");
      console.log(`- ID: ${notification.id}`);
      console.log(`- Message: ${notification.message}`);
      console.log(`- isProcessed: ${notification.isProcessed}`);
    }

    console.log("\nüìù –¢–µ–ø–µ—Ä—å NotificationMatcherService –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...");

  } catch (error) {
    console.error("Error:", error);
  } finally {
    await db.$disconnect();
  }
}

checkTraderDevice();