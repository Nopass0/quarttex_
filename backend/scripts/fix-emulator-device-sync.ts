import { db } from "../src/db"

async function fixEmulatorDeviceSync() {
  try {
    console.log("üîß Fixing Device Emulator Service and device synchronization...\n")
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º—É–ª—è—Ç–æ—Ä–∞
    const emulatorConfig = await db.serviceConfig.findUnique({
      where: { serviceKey: "device_emulator" }
    })
    
    const config = emulatorConfig?.config as any
    const configuredDeviceCode = config?.devices?.[0]?.deviceCode
    
    console.log("ü§ñ Current emulator config:")
    console.log(`   Enabled: ${emulatorConfig?.isEnabled}`)
    console.log(`   Configured device code: ${configuredDeviceCode?.substring(0, 20)}...`)
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞
    const trader = await db.user.findFirst({
      where: { email: "trader@example.com" },
      include: {
        devices: {
          include: { 
            bankDetails: {
              select: {
                id: true,
                methodType: true,
                bankType: true,
                cardNumber: true,
                recipientName: true,
                phoneNumber: true,
                minAmount: true,
                maxAmount: true,
                totalAmountLimit: true,
                currentTotalAmount: true,
                operationLimit: true,
                sumLimit: true,
                intervalMinutes: true,
                isArchived: true,
                isActive: true,
                createdAt: true,
                updatedAt: true,
                deviceId: true,
                userId: true,
              },
            }
          }
        }
      }
    })
    
    if (!trader) {
      console.log("‚ùå Trader not found")
      return
    }
    
    console.log(`\nüë§ Trader ${trader.email}:`)
    console.log(`   Devices: ${trader.devices.length}`)
    
    if (trader.devices.length === 0) {
      console.log("‚ùå No devices found for trader")
      return
    }
    
    const realDevice = trader.devices[0]
    console.log(`   Real device: ${realDevice.name}`)
    console.log(`   Real token: ${realDevice.token.substring(0, 20)}...`)
    console.log(`   Bank details: ${realDevice.bankDetails.length}`)
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ —Ç–æ–∫–µ–Ω—ã
    const tokensMatch = configuredDeviceCode === realDevice.token
    console.log(`   Tokens match: ${tokensMatch}`)
    
    if (!tokensMatch) {
      console.log("\nüîÑ Synchronizing emulator config with real device...")
      
      // 4. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const activeTransactions = await db.transaction.findMany({
        where: {
          OR: [
            { bankDetailId: { in: realDevice.bankDetails.map(bd => bd.id) } },
            { userId: trader.id }
          ],
          status: { in: ["CREATED", "IN_PROGRESS"] },
          createdAt: {
            gte: new Date(Date.now() - 2 * 60 * 60 * 1000)
          }
        },
        take: 5
      })
      
      console.log(`   Found ${activeTransactions.length} active transactions for amounts`)
      
      // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–Ω–∫–∞
      const bankTypeMap: Record<string, string> = {
        "SBERBANK": "SBER",
        "TINKOFF": "TINK", 
        "VTB": "VTB",
        "ALFABANK": "ALFA",
        "GAZPROMBANK": "GAZPROM",
        "OZONBANK": "OZON"
      }
      
      const bankDetail = realDevice.bankDetails[0]
      const templateBankType = bankTypeMap[bankDetail?.bankType] || "SBER"
      
      // 6. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      const newConfig = {
        global: {
          defaultPingSec: 25, // –ù–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          defaultNotifyChance: 0.85, // –í—ã—Å–æ–∫–∏–π —à–∞–Ω—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          defaultSpamChance: 0.08, // –ù–µ–º–Ω–æ–≥–æ —Å–ø–∞–º–∞
          defaultDelayChance: 0.1,
          reconnectOnAuthError: true,
          rngSeed: Date.now()
        },
        devices: [
          {
            deviceCode: realDevice.token, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            bankType: templateBankType,
            model: realDevice.name,
            androidVersion: "13",
            initialBattery: 85,
            pingSec: 25, // –ë—ã—Å—Ç—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            notifyChance: 0.95, // 95% —à–∞–Ω—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            spamChance: 0.05, // 5% —Å–ø–∞–º
            delayChance: 0.1,
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —à–∞–Ω—Å–æ–≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            realAmounts: activeTransactions.map(tx => tx.amount)
          }
        ]
      }
      
      console.log("\nüìù New emulator configuration:")
      console.log(`   Device code: ${realDevice.token.substring(0, 20)}...`)
      console.log(`   Bank type: ${templateBankType}`)
      console.log(`   Ping interval: 25 seconds`) 
      console.log(`   Notification chance: 95%`)
      console.log(`   Real amounts: ${activeTransactions.map(tx => tx.amount).slice(0, 3)}`)
      
      // 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      await db.serviceConfig.update({
        where: { serviceKey: "device_emulator" },
        data: {
          config: newConfig,
          isEnabled: true
        }
      })
      
      console.log("‚úÖ Emulator configuration updated with correct device token")
    }
    
    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const updatedConfig = await db.serviceConfig.findUnique({
      where: { serviceKey: "device_emulator" }
    })
    
    const finalConfig = updatedConfig?.config as any
    const finalDeviceCode = finalConfig?.devices?.[0]?.deviceCode
    
    console.log("\nüìä Final state:")
    console.log(`   Emulator enabled: ${updatedConfig?.isEnabled}`)
    console.log(`   Configured device: ${finalDeviceCode?.substring(0, 20)}...`)
    console.log(`   Real device: ${realDevice.token.substring(0, 20)}...`)
    console.log(`   Tokens synchronized: ${finalDeviceCode === realDevice.token}`)
    
    if (finalDeviceCode === realDevice.token) {
      console.log("\nüéâ Success! Device Emulator Service is now synchronized with real device")
      console.log("\nüìã Next steps:")
      console.log("   1. Start/restart Device Emulator Service if needed")
      console.log("   2. Monitor notification frequency (should be ~every 25 seconds)")
      console.log("   3. Check that notifications use real transaction amounts")
      console.log("   4. Verify notification matching service catches the matches")
    }
    
  } catch (error) {
    console.error("‚ùå Error:", error)
  } finally {
    await db.$disconnect()
  }
}

fixEmulatorDeviceSync()