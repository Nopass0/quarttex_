#!/usr/bin/env bun

import { Elysia } from 'elysia'
import { db } from './src/db'

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–±—ç–∫–æ–≤
const callbackServer = new Elysia()
  .post('/test-callback', ({ body }) => {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫:')
    console.log('   –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(body, null, 2))
    return { 
      success: true, 
      message: 'Callback received successfully',
      receivedData: body
    }
  })
  .listen(4000)

console.log('üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:4000')
console.log('   –≠–Ω–¥–ø–æ–∏–Ω—Ç: POST /test-callback\n')

async function testCallback() {
  await new Promise(resolve => setTimeout(resolve, 1000)) // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ª–±—ç–∫–∞ —Å –ø–æ–ª–µ–º amount...\n')
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ä—á–∞–Ω—Ç–∞ –∏ –º–µ—Ç–æ–¥
    const merchant = await db.merchant.findFirst({
      orderBy: { createdAt: 'desc' }
    })
    
    const method = await db.method.findFirst({
      where: { isEnabled: true }
    })
    
    if (!merchant || !method) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ä—á–∞–Ω—Ç –∏–ª–∏ –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      return
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ª–æ–∫–∞–ª—å–Ω—ã–º callback URL
    const testTransaction = await db.transaction.create({
      data: {
        merchantId: merchant.id,
        amount: 12345.67,
        assetOrBank: 'TEST',
        orderId: 'TEST-ORDER-' + Date.now(),
        currency: 'RUB',
        userId: 'test-user',
        callbackUri: 'http://localhost:4000/test-callback',
        successUri: 'http://localhost:4000/test-callback',
        failUri: 'http://localhost:4000/test-callback',
        expired_at: new Date(Date.now() + 3600000),
        commission: 0,
        clientName: 'Test Client',
        status: 'READY',
        methodId: method.id
      }
    })

    console.log('üìã –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:')
    console.log(`   ID: ${testTransaction.id}`)
    console.log(`   –°—É–º–º–∞: ${testTransaction.amount} RUB`)
    console.log(`   –°—Ç–∞—Ç—É—Å: ${testTransaction.status}`)
    console.log(`   Callback URL: ${testTransaction.callbackUri}\n`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (–∫–∞–∫ –∏–∑ –∞–¥–º–∏–Ω–∫–∏)
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (–∫–∞–∫ –∏–∑ –∞–¥–º–∏–Ω–∫–∏)...')
    
    const proxyResponse = await fetch('http://localhost:3000/api/callback-proxy/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: testTransaction.callbackUri,
        data: {
          id: testTransaction.id,
          amount: testTransaction.amount,  // –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ–º amount!
          status: testTransaction.status
        },
        headers: {},
        transactionId: testTransaction.id
      })
    })

    const proxyResult = await proxyResponse.json()
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:')
    if (proxyResponse.ok && proxyResult.success) {
      console.log('   ‚úÖ –ö–æ–ª–±—ç–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
      console.log('   –û—Ç–≤–µ—Ç –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(proxyResult.data, null, 2))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ amount –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
      if (proxyResult.data?.receivedData?.amount === testTransaction.amount) {
        console.log('   ‚úÖ –ü–æ–ª–µ amount —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω–æ!')
      } else {
        console.log('   ‚ùå –ü–æ–ª–µ amount –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!')
      }
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–ª–±—ç–∫–∞')
      console.log('   –°—Ç–∞—Ç—É—Å:', proxyResponse.status)
      console.log('   –û—à–∏–±–∫–∞:', JSON.stringify(proxyResult, null, 2))
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–±—ç–∫–æ–≤
    const history = await db.callbackHistory.findFirst({
      where: {
        transactionId: testTransaction.id
      },
      orderBy: {
        createdAt: 'desc'
      }
    })

    if (history) {
      console.log('\nüìú –ò—Å—Ç–æ—Ä–∏—è –∫–æ–ª–±—ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:')
      console.log(`   ID –∏—Å—Ç–æ—Ä–∏–∏: ${history.id}`)
      console.log(`   Status Code: ${history.statusCode}`)
      console.log(`   Payload —Å–æ–¥–µ—Ä–∂–∏—Ç amount: ${history.payload?.amount ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`)
    }

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await db.transaction.delete({
      where: { id: testTransaction.id }
    })
    console.log('\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await db.$disconnect()
    callbackServer.stop()
    console.log('\nüõë –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    process.exit(0)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
setTimeout(testCallback, 100)