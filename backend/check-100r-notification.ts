import { db } from "./src/db"

async function main() {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 100—Ä'...")
    
    // –ò—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = await db.notification.findFirst({
      where: {
        message: {
          contains: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 100—Ä"
        }
      },
      include: {
        Device: {
          include: {
            bankDetails: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
    
    if (!notification) {
      console.log("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
      return
    }
    
    console.log("\nüì± –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
    console.log(`   ID: ${notification.id}`)
    console.log(`   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${notification.Device?.name} (${notification.deviceId})`)
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${notification.message}`)
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${notification.isProcessed}`)
    console.log(`   ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${notification.transactionId || '–ù–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–û'}`)
    console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${notification.createdAt}`)
    console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(notification.metadata, null, 2)}`)
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–æ–π regex —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º VTB –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const vtbPatterns = [
      {
        name: "VTB Pattern 1 (–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ XXX—Ä –°—á–µ—Ç)",
        regex: /–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\s+([\d\s]+(?:[.,]\d{1,2})?)\s+–°—á–µ—Ç[*\s]*\d+\s+–æ—Ç\s+([–ê-–Ø–∞-—èA-Za-z\s]+\.).*?–ë–∞–ª–∞–Ω—Å\s+([\d\s]+(?:[.,]\d{1,2})?)\s*—Ä/i
      },
      {
        name: "VTB Pattern 2 (–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ XXX—Ä –∫–∞—Ä—Ç–∞)",
        regex: /–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\s+([\d\s]+(?:[.,]\d{1,2})?)\s*—Ä.*?–∫–∞—Ä—Ç–∞/i
      },
      {
        name: "VTB Pattern 3 (–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ XXX—Ä –°—á–µ—Ç - –Ω–æ–≤—ã–π)",
        regex: /–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\s+([\d\s]+(?:[.,]\d{1,2})?)\s*—Ä\s+–°—á–µ—Ç[*\s]*\d+\s+–æ—Ç\s+([–ê-–Ø–∞-—èA-Za-z\s]+\.).*?–ë–∞–ª–∞–Ω—Å\s+([\d\s]+(?:[.,]\d{1,2})?)\s*—Ä/i
      }
    ]
    
    const message = notification.message || ''
    vtbPatterns.forEach(pattern => {
      const match = pattern.regex.exec(message)
      if (match) {
        console.log(`   ‚úÖ ${pattern.name}: –Ω–∞—à–µ–ª —Å—É–º–º—É ${match[1]}`)
        if (match[2]) console.log(`      –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${match[2]}`)
        if (match[3]) console.log(`      –ë–∞–ª–∞–Ω—Å: ${match[3]}`)
      } else {
        console.log(`   ‚ùå ${pattern.name}: –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`)
      }
    })
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å—É–º–º–æ–π 100
    const transactions = await db.transaction.findMany({
      where: {
        amount: 100,
        type: 'IN',
        requisites: {
          deviceId: notification.deviceId
        }
      },
      include: {
        requisites: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    })
    
    console.log(`\nüí∞ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Å—É–º–º–æ–π 100 –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: ${transactions.length}`)
    
    transactions.forEach(tx => {
      console.log(`\n   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${tx.id}:`)
      console.log(`   - –°—Ç–∞—Ç—É—Å: ${tx.status}`)
      console.log(`   - –†–µ–∫–≤–∏–∑–∏—Ç: ${tx.requisites?.cardNumber || 'N/A'}`)
      console.log(`   - –ë–∞–Ω–∫: ${tx.requisites?.bankType || 'N/A'}`)
      console.log(`   - –°–æ–∑–¥–∞–Ω–∞: ${tx.createdAt.toLocaleString()}`)
      console.log(`   - bankDetailId: ${tx.bankDetailId}`)
    })
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    console.log("\nüìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    
    const logs = await db.serviceLog.findMany({
      where: {
        OR: [
          {
            message: {
              contains: "100"
            }
          },
          {
            data: {
              path: ["notificationId"],
              equals: notification.id
            }
          }
        ],
        service: {
          name: {
            in: ["NotificationMatcherService", "NotificationAutoProcessorService"]
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 10
    })
    
    logs.forEach(log => {
      console.log(`\n[${log.createdAt.toLocaleTimeString()}] ${log.serviceName} - ${log.level}:`)
      console.log(`   ${log.message}`)
      if (log.data) {
        console.log(`   –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(log.data, null, 2)}`)
      }
    })
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error)
  }
}

main()