import { db } from "./src/db"

async function main() {
  try {
    const message = "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 1234 –°—á–µ—Ç*5715 –æ—Ç –ò–õ–¨–ú–ê–ù –î. –ë–∞–ª–∞–Ω—Å 188911.53—Ä 23:43"
    const packageName = "ru.vtb24.mobilebanking.android"
    
    console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`)
    console.log(`   –ü–∞–∫–µ—Ç: ${packageName}`)
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞—Ç—á–µ—Ä—ã –¥–ª—è VTB
    const vtbMatchers = [
      {
        regex: /(?:–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ|–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ|–ü–µ—Ä–µ–≤–æ–¥).*?([\d\s]+[.,]?\d{0,2})\s*‚ÇΩ/i,
        name: "VTB Pattern 1"
      },
      {
        regex: /–ü–µ—Ä–µ–≤–æ–¥\s+–æ—Ç.*?–°—É–º–º–∞:\s*([\d\s]+[.,]?\d{0,2})\s*‚ÇΩ/i,
        name: "VTB Pattern 2"
      },
      {
        regex: /\+([\d\s]+[.,]?\d{0,2})\s*‚ÇΩ/i,
        name: "VTB Pattern 3"
      }
    ]
    
    console.log("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–∞—Ç—á–µ—Ä–æ–≤ VTB:")
    let vtbFound = false
    for (const matcher of vtbMatchers) {
      const match = matcher.regex.exec(message)
      if (match) {
        console.log(`   ‚úÖ ${matcher.name}: –Ω–∞—à–µ–ª ${match[1]}`)
        vtbFound = true
      } else {
        console.log(`   ‚ùå ${matcher.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
      }
    }
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–µ—Ä—ã
    const universalMatchers = [
      /–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\s+(\d+)/i,
      /–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\s+([\d\s]+[.,]?\d{0,2})\s*(?:—Ä|‚ÇΩ|—Ä—É–±|RUB)/i,
      /\+([\d\s]+[.,]?\d{0,2})\s*(?:‚ÇΩ|—Ä—É–±|RUB|—Ä)/i,
      /(?:–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ|–ü–µ—Ä–µ–≤–æ–¥|–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ|–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ|–ü–æ–ª—É—á–µ–Ω)\s+([\d\s]+[.,]?\d{0,2})\s*(?:‚ÇΩ|—Ä—É–±|RUB|—Ä)/i,
    ]
    
    console.log("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ—Ä–æ–≤:")
    let universalFound = false
    for (let i = 0; i < universalMatchers.length; i++) {
      const match = universalMatchers[i].exec(message)
      if (match) {
        console.log(`   ‚úÖ Universal ${i + 1}: –Ω–∞—à–µ–ª "${match[1]}"`)
        universalFound = true
      } else {
        console.log(`   ‚ùå Universal ${i + 1}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`)
      }
    }
    
    // –§—É–Ω–∫—Ü–∏—è parseAmount
    function parseAmount(amountStr: string): number {
      const cleanAmount = amountStr.replace(/\s/g, '').replace(',', '.')
      return parseFloat(cleanAmount)
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–∞—Ä—Å–∏–Ω–≥
    if (universalFound) {
      const match = /–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ\s+(\d+)/i.exec(message)
      if (match) {
        const amount = parseAmount(match[1])
        console.log(`\n‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${amount}`)
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    const notification = await db.notification.findFirst({
      where: {
        message: {
          contains: "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ 1234"
        }
      },
      include: {
        Device: true
      }
    })
    
    if (notification) {
      const transactions = await db.transaction.findMany({
        where: {
          amount: 1234,
          type: 'IN',
          status: 'IN_PROGRESS',
          requisites: {
            deviceId: notification.deviceId
          }
        },
        include: {
          requisites: true
        }
      })
      
      console.log(`\nüí∞ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: ${transactions.length}`)
      if (transactions.length > 0) {
        console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: ${transactions[0].id}`)
        console.log(`   –†–µ–∫–≤–∏–∑–∏—Ç: ${transactions[0].requisites?.cardNumber}`)
      }
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error)
  }
}

main()