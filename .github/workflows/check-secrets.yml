name: Check Deployment Secrets

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/check-secrets.yml'

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check deployment secrets configuration
        run: |
          echo "============================================"
          echo "Checking deployment secrets configuration..."
          echo "============================================"
          echo ""
          
          ERRORS=0
          
          # Function to check if a secret is set
          check_secret() {
            local SECRET_NAME=$1
            local SECRET_VALUE=$2
            local REQUIRED=$3
            
            if [ -z "$SECRET_VALUE" ]; then
              if [ "$REQUIRED" = "required" ]; then
                echo "❌ $SECRET_NAME: NOT SET (REQUIRED)"
                return 1
              else
                echo "⚠️  $SECRET_NAME: NOT SET (optional)"
                return 0
              fi
            else
              # Don't expose the actual value, just show length
              echo "✅ $SECRET_NAME: SET (length: ${#SECRET_VALUE})"
              return 0
            fi
          }
          
          echo "REQUIRED SECRETS:"
          echo "-----------------"
          
          check_secret "SERVER_HOST" "${{ secrets.SERVER_HOST }}" "required" || ERRORS=$((ERRORS + 1))
          check_secret "SERVER_USER" "${{ secrets.SERVER_USER }}" "required" || ERRORS=$((ERRORS + 1))
          check_secret "PROJECT_PATH" "${{ secrets.PROJECT_PATH }}" "required" || ERRORS=$((ERRORS + 1))
          check_secret "DATABASE_URL" "${{ secrets.DATABASE_URL }}" "required" || ERRORS=$((ERRORS + 1))
          check_secret "JWT_SECRET" "${{ secrets.JWT_SECRET }}" "required" || ERRORS=$((ERRORS + 1))
          
          echo ""
          echo "AUTHENTICATION (at least one required):"
          echo "----------------------------------------"
          
          HAS_PASSWORD=0
          HAS_KEY=0
          
          if [ -n "${{ secrets.SERVER_PASSWORD }}" ]; then
            echo "✅ SERVER_PASSWORD: SET (length: ${#SERVER_PASSWORD})"
            HAS_PASSWORD=1
          else
            echo "⚠️  SERVER_PASSWORD: NOT SET"
          fi
          
          if [ -n "${{ secrets.SERVER_SSH_KEY }}" ]; then
            echo "✅ SERVER_SSH_KEY: SET"
            HAS_KEY=1
          else
            echo "⚠️  SERVER_SSH_KEY: NOT SET"
          fi
          
          if [ $HAS_PASSWORD -eq 0 ] && [ $HAS_KEY -eq 0 ]; then
            echo "❌ ERROR: No authentication method configured (need SERVER_PASSWORD or SERVER_SSH_KEY)"
            ERRORS=$((ERRORS + 1))
          fi
          
          echo ""
          echo "OPTIONAL SECRETS:"
          echo "-----------------"
          
          check_secret "SERVER_PORT" "${{ secrets.SERVER_PORT }}" "optional"
          check_secret "SUPER_ADMIN_KEY" "${{ secrets.SUPER_ADMIN_KEY }}" "optional"
          check_secret "ADMIN_IPS" "${{ secrets.ADMIN_IPS }}" "optional"
          
          echo ""
          echo "============================================"
          
          if [ $ERRORS -gt 0 ]; then
            echo "❌ CONFIGURATION INCOMPLETE: $ERRORS required secret(s) missing"
            echo ""
            echo "To fix this:"
            echo "1. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "2. Click 'New repository secret' for each missing secret"
            echo "3. Add the required values"
            echo ""
            echo "Example values:"
            echo "  SERVER_HOST: your-server.com or IP address"
            echo "  SERVER_USER: ubuntu or root"
            echo "  SERVER_PASSWORD: your-ssh-password"
            echo "  SERVER_SSH_KEY: (paste your private SSH key)"
            echo "  PROJECT_PATH: /home/ubuntu/quattrex"
            echo "  DATABASE_URL: postgresql://user:pass@localhost/dbname"
            echo "  JWT_SECRET: any-random-secret-string"
            exit 1
          else
            echo "✅ All required secrets are configured!"
            echo ""
            echo "You can now run the deployment workflow."
          fi